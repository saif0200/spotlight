name: Build Windows (Tauri)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-windows:
    name: Build Windows bundle on windows-latest
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          # Vite requires Node >= 20.19 or 22.12+, use Node 22 LTS
          node-version: '22'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Ensure tauri CLI (optional)
        run: |
          npm run -s tauri -- --version || npm i -g @tauri-apps/cli

      - name: Disable updater artifacts in CI (avoid missing signing key)
        # The repo has an updater public key and createUpdaterArtifacts enabled which requires a
        # private signing key present during build. In CI we typically don't sign installers, so
        # temporarily disable creating updater artifacts by patching src-tauri/tauri.conf.json.
        run: |
          node -e "const fs=require('fs');const p='src-tauri/tauri.conf.json';const j=JSON.parse(fs.readFileSync(p));if(j.bundle){j.bundle.createUpdaterArtifacts=false;}fs.writeFileSync(p,JSON.stringify(j,null,2));console.log('patched',p);"

      - name: Build Tauri (Windows release)
        # uses the package.json script `tauri:build-windows` which runs: tauri build --target x86_64-pc-windows-msvc
        run: npm run tauri:build-windows

      - name: Upload EXE artifact only
        uses: actions/upload-artifact@v4
        with:
          name: spotlight-windows-exe
          # Upload only .exe files (packed installer and/or built app exe)
          path: |
            src-tauri/target/**/release/**/*.exe

      - name: List build output (debug)
        # Show where artifacts were written so it's obvious to the workflow logs
        run: |
          echo "Listing src-tauri/target contents"
          dir src-tauri/target -Recurse
